# Docker Compose environment configuration
spring:
  profiles:
    active: docker
  
  # Docker database configurations
  data:
    mongodb:
      uri: mongodb://mongodb:27017/logistics
      auto-index-creation: true
    redis:
      host: redis
      port: 6379
      database: 0
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 10
          max-idle: 8
          min-idle: 2
  
  # Docker cloud configuration
  cloud:
    stream:
      kafka:
        binder:
          brokers: kafka:9092
          auto-create-topics: true
          replication-factor: 1

# Docker logging
logging:
  level:
    com.dpd.uk: INFO
    org.springframework.cloud: INFO
    org.springframework.web: INFO
    org.springframework.data: INFO
    org.springframework.kafka: INFO
    org.apache.kafka: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"

# Docker management
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

# Docker application properties
app:
  external:
    traffic:
      api-key: ${TRAFFIC_API_KEY:docker-traffic-api-key}
      base-url: https://api.traffic-service.com/v1
      timeout: 5000
    
    mapping:
      api-key: ${MAPPING_API_KEY:docker-mapping-api-key}
      base-url: https://atlas.microsoft.com/map
      timeout: 10000
  
  features:
    eta-calculation:
      cache-enabled: true
      cache-ttl: 600
      debug-mode: false
    
    route-optimization:
      debug-mode: false
      log-iterations: false
    
    returns-orchestration:
      debug-mode: false
      mock-external-apis: false
    
    real-time-notifications:
      debug-mode: false
      log-messages: false

# Docker security
security:
  cors:
    allowed-origins: "http://localhost:3000,http://localhost:8080,http://ops-console:3000"
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS,PATCH
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600

# Docker monitoring
monitoring:
  prometheus:
    enabled: true
    endpoint: /actuator/prometheus
  
  jaeger:
    enabled: true
    endpoint: http://jaeger:14268/api/traces
    service-name: logistics-platform
  
  grafana:
    enabled: true
    endpoint: http://grafana:3000
